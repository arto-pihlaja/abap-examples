class ZCL_REVAPP_REP definition
  public
  create public .

public section.

  types:
    BEGIN OF REVAPP_KEY_T,
    refno type Ziv_refno,
    buzei type buzei,
    END OF revapp_key_t .
  types:
    revapp_key_tt type STANDARD TABLE OF revapp_key_t with DEFAULT KEY .

  constants CO_POSTED type ZIV_STATUS value 'POSTED'. "#EC NOTEXT
  constants CO_TOREVIEW type ZIV_STATUS value 'TOREVIEW'. "#EC NOTEXT
  constants CO_APPROVED type ZIV_STATUS value 'APPROVED'. "#EC NOTEXT
  constants CO_APPROVE_OK type ZIV_STATUS value 'APPROVE_OK'. "#EC NOTEXT
  constants CO_TOAPPROVAL type ZIV_STATUS value 'TOAPPROVAL'. "#EC NOTEXT
  constants CO_REVIEW_OK type ZIV_STATUS value 'REVIEW_OK'. "#EC NOTEXT
  constants CO_PART_APPR type ZIV_STATUS value 'PART_APPR'. "#EC NOTEXT
  constants CO_FORWARD_R type ZIV_STATUS value 'FORWARD_R'. "#EC NOTEXT
  constants CO_FORWARD_A type ZIV_STATUS value 'FORWARD_A'. "#EC NOTEXT
  constants CO_PART_REV type ZIV_STATUS value 'PART_REV'. "#EC NOTEXT
  data MV_PROCESS type ZIV_PROCESS .

  methods CONSTRUCTOR .
  methods GET_REVAPP_DATA .
  methods GET_NAMES .
protected section.

  data AGENT type ref to ZCA_P_REVAPP .
  data MO_DB type ref to ZIF_RA_SEL .
  interface ZIF_RA_SEL load .
  data MRG_STATUS type ZIF_RA_SEL=>STATUS_RT .
  data GV_REFNO_NEW_VERSION type ZIV_REFNO .
  data MT_LOG_APPR type ZLOG_APPR_TAB .

  methods GET_REVAPP_STATUS_RANGE
    returning
      value(RG_STATUS) type ZCL_IV_SELECT=>ZIF_RA_SEL~STATUS_RT .
  methods BUILD_REVAPP_KEY_TAB
    returning
      value(RT_RA_KEY) type ZIF_RA_SEL=>REVAPP_KEY_TT .
  methods SET_RG_STATUS_POSTED .
  methods ADD_FROM_HISTORY
    importing
      !IV_UNAME type XUBNAME .
  methods PROCESS_LOG_APPR
    importing
      !IO_RA type ref to ZCL_P_REVAPP .
  methods PROCESS_LOG_HIS
    importing
      !IO_RA type ref to ZCL_P_REVAPP .
  methods SORT_MT .
  methods COMPRESS_HIS .
  methods GET_REVAPP_HIS
    importing
      !IT_REFNO type REVAPP_KEY_TT .
private section.

  methods GET_REFNO_FOR_NEW_VERSION .
ENDCLASS.



CLASS ZCL_REVAPP_REP IMPLEMENTATION.


method ADD_FROM_HISTORY.
endmethod.


METHOD BUILD_REVAPP_KEY_TAB.
ENDMETHOD.


method COMPRESS_HIS.
endmethod.


method CONSTRUCTOR.

* CER-237 INS BEGIN
  CALL METHOD ME->GET_REFNO_FOR_NEW_VERSION.
* CER-237 INS END
endmethod.


METHOD GET_NAMES.
ENDMETHOD.


method GET_REFNO_FOR_NEW_VERSION.

  data lv_value(10) type c.
  CALL FUNCTION 'ZIV_READ_HCVAL'
    EXPORTING
      IM_NAME    = 'CER237_FIRST_REFNO'
      IM_PROCESS = 'OSLA'
    IMPORTING
      EX_VALUE   = lv_value
    EXCEPTIONS
      NOT_FOUND  = 1
      OTHERS     = 2.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ELSE.
    GV_REFNO_NEW_VERSION = lv_value.
  ENDIF.

endmethod.


METHOD GET_REVAPP_DATA.
  DATA:
        lt_ra_key TYPE revapp_key_tt,
        lt_refno type revapp_key_tt,
        result TYPE osreftab,
        lo_ra TYPE REF TO Zcl_p_revapp,
        lo_obj TYPE REF TO object.

*1. Get the reviewer/postedby and approver from Zlog_appr for every report row
  agent = Zca_p_revapp=>agent.
  lt_ra_key = me->build_revapp_key_tab( ). "called from the subclass
*TRY.
  result = agent->if_os_ca_persistency~get_persistent_by_key_tab( i_key_tab = lt_ra_key ).
* CATCH cx_os_object_not_found .
*ENDTRY.

* 2. Get the log history for every refno
  lt_refno = lt_ra_key.
  delete ADJACENT DUPLICATES FROM lt_refno COMPARING refno.
  mrg_status = GET_REVAPP_STATUS_RANGE( ).
  mo_db->set_ranges( irg_status = mrg_status ).

  get_revapp_his( lt_refno ).
  sort_mt( ).

*3. Loop through the entries from Zlog_appr and fill in review and approval data to the report rows
  LOOP AT result INTO lo_obj.
    TRY.
      lo_ra ?= lo_obj.
*      catch cx_root.
    ENDTRY.
    IF lo_ra IS INITIAL.
      CONTINUE.
    ENDIF.
* CER-237: New version
     if lo_ra->get_refno( ) >= gv_refno_new_version.
       process_log_appr( lo_ra ).
     else.
       process_log_his( lo_ra ).
     endif.
  ENDLOOP.
  get_names( ).

ENDMETHOD.


method GET_REVAPP_HIS.
endmethod.


METHOD get_revapp_status_range.
  DATA:
      ls_status TYPE LINE OF Zcl_iv_select=>Zif_ra_sel~status_rt,
      lo_tdescr TYPE REF TO cl_abap_typedescr,
      my_name TYPE abap_abstypename.
* The function module ZIV_GET_STATUSES doesn't fit this purpose, so we'll list statuses here.
  ls_status-sign = 'I'.
  ls_status-option = 'EQ'.
  ls_status-low = Zcl_revapp_rep=>co_toapproval.
  APPEND ls_status TO rg_status.
  ls_status-low = Zcl_revapp_rep=>co_part_rev.
  APPEND ls_status TO rg_status.
  ls_status-low = Zcl_revapp_rep=>co_review_ok.
  APPEND ls_status TO rg_status.
  ls_status-low = Zcl_revapp_rep=>co_part_appr.
  APPEND ls_status TO rg_status.
  ls_status-low = Zcl_revapp_rep=>co_approve_ok.
  APPEND ls_status TO rg_status.
  ls_status-low = Zcl_revapp_rep=>co_approved.
  APPEND ls_status TO rg_status.
* SolMan 8000002917 - in some IV cases, master user actions are considered
  lo_tdescr = cl_abap_objectdescr=>describe_by_object_ref( me ).
  my_name = lo_tdescr->get_relative_name( ).
*  my_name = cl_abap_classdescr=>get_class_name( me ).
  IF my_name = 'ZCL_REVAPP_REP_IV'.
    ls_status-low = Zcl_revapp_rep=>co_toreview.
    APPEND ls_status TO rg_status.
  ENDIF.
* begin INS SolMan 8000002933 - also consider the case when the 1st reviewer/approver only forwards
    ls_status-low = Zcl_revapp_rep=>co_FORWARD_R.
    APPEND ls_status TO rg_status.
    ls_status-low = Zcl_revapp_rep=>co_FORWARD_A.
    APPEND ls_status TO rg_status.

* end INS SolMan 8000002933


ENDMETHOD.


method PROCESS_LOG_APPR.

endmethod.


method PROCESS_LOG_HIS.
endmethod.


method SET_RG_STATUS_POSTED.
  data: ls_status type line of ZIF_RA_SEL=>STATUS_RT.
  clear mrg_status.
  ls_status-sign = 'I'.
  ls_status-option = 'EQ'.
  ls_status-low = co_posted.
  append ls_status to mrg_status.
endmethod.


method SORT_MT.
endmethod.
* Macros
*"* use this source file for any macro definitions you need
*"* in the implementation part of the class
DEFINE assign_from_comp.
  assign component &1 of structure &2 to <&3> casting.
  if sy-subrc = 0.
    &4 = <&3>.
  endif.
END-OF-DEFINITION.

DEFINE assign_to_comp.
  assign component &1 of structure &2 to <&3> casting.
  if sy-subrc = 0.
    <&3> = &4.
  endif.
END-OF-DEFINITION.

ENDCLASS.
